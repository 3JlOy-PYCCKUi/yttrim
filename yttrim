#!/bin/sh

###########################################################
### YTTRIM ################################################

###########################################################
### VARIABLES #############################################

ff="ffmpeg -loglevel quiet -stats"
fzf="fzf -e --info=inline"

### FORMATTING ############################################

underline="\e[4m"
reset="\e[0m"

###########################################################
### FUNCTIONS #############################################

### HELP ##################################################

helpinfo() {
  cat << EOF
Usage: yttrim [OPTION]...
Trim portions from online videos with ease.

  -ss <timestamp>         start timestamp
  -to <timestamp>         end timestamp
  -f/--filename <name>    filename to be saved as
  -l/--link <link>        audio/video link
  -m/--audio-only         to download the audio only
  --csv-gen               generate a template CSV (for batch trim)
  --csv <file>            provide the csv file for batch trim
  -h/--help               display this help and exit

EOF
}

### IMP ###################################################

depcheck() {
	for dep; do
    command -v "$dep" >/dev/null 2>&1
    if [ $? -ne 0 ]; then
			printf "%s not found. Please install it.\n" "$dep" >&2
			exit 2
		fi
	done
	unset -v dep
}

### UMM ###################################################

decide() {
    case $audio_only in
    y) audiod ;;
    n) videod ;;
    *) printf "Invalid choice.\n";;
    esac

    unset -v begin end filename link audio_only
}

ask_loop() {
    while [ -z $link ]; do printf "Enter link: "; read -r link; done
    while [ -z "$begin" ]; do printf "Enter beginning: "; read -r begin; done
    while [ -z "$end" ]; do printf "Enter end: "; read -r end; done
    while [ -z "$filename" ]; do printf "Enter filename: "; read -r filename; done
    while [ -z "$audio_only" ]; do printf "Audio only: [y/n] "; read -r audio_only; done

    decide
}

### CONVERSION AND STUFF ##################################

audiod() {
    $ff -ss "$begin" -to "$end" \
        -i "$(yt-dlp -f bestaudio -g "$link")" "$filename.m4a" && \
        printf "\nAudio extracted and saved as M4A.\n\n"
}

merge() {
    audiod

    $ff -ss "$begin" -to "$end" -i \
        "$(yt-dlp -f "$id" -g "$link")" "$filename.mkv" && \
        printf "\nVideo extracted.\n\n"

    $ff -i "$filename.mkv" -i "$filename.m4a" -c copy "$filename-merged.mkv" && \
        rm "$filename.mkv" "$filename.m4a" && \
        printf "\nVideo and audio files merged into MKV.\nDeleted input files.\n\n"
}

videod() {
    qual=$(yt-dlp -F -q --no-colors "$link" | $fzf)

    [ -z "$qual" ] && printf "\nID not selected. Download aborted.\n\n" && exit 2

    id=${qual%% *}

    echo "$qual" | grep -q only
    if [ $? -ne 0 ]
    then
        $ff -ss "$begin" -to "$end" -i "$(yt-dlp -f "$id" -g "$link")" "$filename.mp4" && \
            printf "\nVideo extracted and saved as MP4.\n"
    else
        merge
    fi
}

### CSV ###################################################

csv_gen() {
    printf "Link,Beginning,End,Filename,Audio_only\t[FIRST LINE IS IGNORED]\n\n" > ./input.csv && \
        printf "Template CSV generated.\n"
}

csv_parse() {
    for line in $(tail -n+2 "$csv_file" | nl -s,)
    do
        num=$(echo "$line" | cut -d"," -f1)
        link=$(echo "$line" | cut -d"," -f2)
        begin=$(echo "$line" | cut -d"," -f3)
        end=$(echo "$line" | cut -d"," -f4)
        filename=$(echo "$line" | cut -d"," -f5)
        audio_only=$(echo "$line" | cut -d"," -f6)

        printf \
            "\n${underline}Num${reset} -> $num \
            \n${underline}Link${reset} -> $link \
            \n${underline}Beginning${reset} -> $begin \
            \n${underline}End${reset} -> $end \
            \n${underline}File${reset} -> $filename \
            \n${underline}Audio${reset} -> $audio_only\n"

        decide
    done
}

###########################################################

depcheck "yt-dlp" "ffmpeg" "fzf"

while [ "$1" != "" ]; do
    case $1 in
    -ss) shift; begin=$1 ;; 
    -to) shift; end=$1 ;; 
    -f | --filename) shift; filename=$1 ;; 
    -l | --link) shift; link=$1 ;; 
    -m | --audio-only) audio_only=y ;; 
    --csv-gen) csv_gen && exit ;; 
    --csv) shift; csv_file=$1; csv_parse && exit ;;
    -h | --help) helpinfo && exit ;;
    *) printf "Invalid option.\n" && helpinfo && exit ;;
    esac
    shift
done

ask_loop
